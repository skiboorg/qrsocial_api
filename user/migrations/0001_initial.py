# Generated by Django 3.1.3 on 2020-11-26 17:22

from django.db import migrations, models
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='user/avatars', verbose_name='Фото')),
                ('bg_image', models.ImageField(blank=True, null=True, upload_to='user/bg', verbose_name='Задний фон')),
                ('fio', models.CharField(blank=True, default='Иван', max_length=50, null=True, verbose_name='ФИО')),
                ('nickname', models.CharField(blank=True, default='Иванов', max_length=50, null=True, verbose_name='@ник')),
                ('wechatid', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='Эл. почта')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='День рождения')),
                ('balance', models.IntegerField(default=0, verbose_name='Баланс')),
                ('orders_count', models.IntegerField(default=0, verbose_name='Размещено заказов')),
                ('rent_count', models.IntegerField(default=0, verbose_name='Взято в аренду')),
                ('partner_balance', models.IntegerField(default=0, verbose_name='Партнерский баланс')),
                ('rating', models.IntegerField(default=0, verbose_name='Рейтинг')),
                ('years', models.IntegerField(default=0, verbose_name='Лет')),
                ('vip_update', models.DateField(blank=True, null=True, verbose_name='Дата начала VIP')),
                ('vip_expire', models.DateField(blank=True, null=True, verbose_name='Дата завершения VIP')),
                ('last_online', models.DateTimeField(auto_now=True, null=True, verbose_name='Последний раз был онлайн')),
                ('is_vip', models.BooleanField(default=False, verbose_name='VIP?')),
                ('is_streamer', models.BooleanField(default=False, verbose_name='Стример?')),
                ('is_online', models.BooleanField(default=False, verbose_name='Онлайн?')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Акканнт подтвержден?')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='EMail подтвержден?')),
                ('verify_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код подтверждения')),
                ('stream_key', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ключ стрима')),
                ('channel', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
    ]
